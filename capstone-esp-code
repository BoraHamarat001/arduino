#include <WiFi.h>
#include <PubSubClient.h>
#include <TinyGPSPlus.h>
#include <SoftwareSerial.h>
#include "HX711.h"

// Wi-Fi ayarları
const char* ssid = "Zyxel_9691";
const char* password = "G4EGJG3KMG";

// MQTT sunucu ayarları
const char* mqtt_server = "192.168.1.49";
const int mqtt_port = 1883;

// GPS ayarları
static const int RXPin = 16, TXPin = 17;
static const uint32_t GPSBaud = 9600;

// Pin tanımlamaları
#define MOTORpin 22
#define DT1 4   // 1kg DT pin
#define SCK1 5  // 1kg SCK pin
#define DT2 27  // 10kg DT pin
#define SCK2 14 // 10Kg SCK pin

// Nesneler
WiFiClient espClient;
PubSubClient client(espClient);
TinyGPSPlus gps;
SoftwareSerial ss(RXPin, TXPin);
HX711 scale1;
HX711 scale2;

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Wi-Fi'ya bağlanılıyor: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("Wi-Fi bağlantısı başarılı.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mesaj geldi [");
  Serial.print(topic);
  Serial.print("]: ");
  String message;
  for (int i = 0; i < length; i++) {
    message += (char)payload[i];
  }
  Serial.println(message);

  if (String(topic) == "device/schedule/#") {
    if (message == "ON") {
      digitalWrite(MOTORpin, HIGH);
      Serial.println("Motor açılıyor!");
    } else if (message == "OFF") {
      digitalWrite(MOTORpin, LOW);
      Serial.println("Motor kapanıyor!");
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("MQTT sunucuya bağlanılıyor...");
    if (client.connect("ESP32Client")) {
      Serial.println(" BAĞLANDI!");
      client.subscribe("/device/schedule");
    } else {
      int state = client.state();
      Serial.print(" BAĞLANTI HATASI, rc=");
      Serial.print(state);
      Serial.println();
      printMqttError(state);
      delay(5000);
    }
  }
}

void printMqttError(int state) {
  switch(state) {
    case -4: Serial.println(" * MQTT_CONNECTION_TIMEOUT"); break;
    case -3: Serial.println(" * MQTT_CONNECTION_LOST");    break;
    case -2: Serial.println(" * MQTT_CONNECT_FAILED");     break;
    case -1: Serial.println(" * MQTT_DISCONNECTED");       break;
    default: Serial.println(" * BİLİNMEYEN HATA");         break;
  }
}

void setup() {
  Serial.begin(115200);
  ss.begin(GPSBaud);
  
  // Ağırlık sensörleri setup
  scale1.begin(DT1, SCK1);
  scale2.begin(DT2, SCK2);
  pinMode(MOTORpin, OUTPUT);
  
  Serial.println("Kalibrasyon için lütfen baskül boş olsun...");
  delay(2000);
  
  scale1.set_scale(2280.0);
  scale1.tare();
  scale2.set_scale(228000.0);
  scale2.tare();
  
  Serial.println("Kalibrasyon tamamlandı.");
  
  // WiFi ve MQTT setup
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void GPSs() {
  while (ss.available()) gps.encode(ss.read());
  
  if (gps.location.isValid()) {
    char gpsData[50];
    sprintf(gpsData, "{\"lat\":%.6f,\"lng\":%.6f}", 
            gps.location.lat(), gps.location.lng());
    client.publish("/device/gps", gpsData);
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Ağırlık verilerini MQTT'ye gönder
  static unsigned long lastWeightMsg = 0;
  if (millis() - lastWeightMsg > 5000) {
    lastWeightMsg = millis();
    
    char weightData1[50];
    sprintf(weightData1, "{\"weight\":%.1f,\"unit\":\"g\"}", scale1.get_units());
    client.publish("/device/weight/1kg", weightData1);
    
    char weightData2[50];
    sprintf(weightData2, "{\"weight\":%.2f,\"unit\":\"kg\"}", scale2.get_units());
    client.publish("/device/weight/10kg", weightData2);
  }

  // GPS verilerini gönder
  GPSs();
  
  delay(1000);
}
